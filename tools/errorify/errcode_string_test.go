// Code generated by "errorify -type errcode -linecomment"; DO NOT EDIT.

package main_test

import (
	"github.com/cocktail828/go-tools/pkg/errorx"
	"github.com/pkg/errors"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the errorify command to generate them again.
	var x [1]struct{}
	_ = x[GeneralErr-0]
	_ = x[GeneralXrr1-1]
	_ = x[GeneralXrr2-2]
	_ = x[GeneralXrr3-3]
	_ = x[GeneralXrr4-4]
	_ = x[GeneralXrr5-5]
	_ = x[GeneralXrr6-6]
	_ = x[GeneralXrr7-7]
	_ = x[GeneralXrr8-8]
	_ = x[GeneralXrr9-9]
	_ = x[GeneralXrr10-10]
	_ = x[GeneralXrr11-11]
}

const _errcode_name = "unknow errorunknow errorunknow errorunknow errorunknow errorunknow errorunknow errorunknow errorunknow errorunknow errorunknow errorunknow error"

var _errcode_index = [...]uint8{0, 12, 24, 36, 48, 60, 72, 84, 96, 108, 120, 132, 144}

func (i errcode) Desc() string {
	if i >= errcode(len(_errcode_index)-1) {
		return "errcode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _errcode_name[_errcode_index[i]:_errcode_index[i+1]]
}

func (i errcode) Code() uint32 {
	return uint32(i)
}

func (i errcode) Wrap(err error, message string) error {
	return errorx.New(i, errors.Wrap(err, message))
}

func (i errcode) Wrapf(err error, format string, args ...any) error {
	return errorx.New(i, errors.Wrapf(err, format, args...))
}

func (i errcode) WithMessage(message string) error {
	return errorx.New(i, errors.New(message))
}

func (i errcode) WithMessagef(err error, format string, args ...any) error {
	return errorx.New(i, errors.Errorf(format, args...))
}
