// Code generated by "errorify -type errcode -linecomment"; DO NOT EDIT.

package main_test

import (
	"fmt"
	"github.com/pkg/errors"
	"io"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the errorify command to generate them again.
	var x [1]struct{}
	_ = x[GeneralErr-0]
	_ = x[GeneralXrr1-1]
	_ = x[GeneralXrr2-2]
	_ = x[GeneralXrr3-3]
	_ = x[GeneralXrr4-4]
	_ = x[GeneralXrr5-5]
	_ = x[GeneralXrr6-6]
	_ = x[GeneralXrr7-7]
	_ = x[GeneralXrr8-8]
	_ = x[GeneralXrr9-9]
	_ = x[GeneralXrr10-10]
	_ = x[GeneralXrr11-11]
	_ = x[GeneralXrr20-1000]
	_ = x[GeneralXrr21-1002]
}

const (
	_errcode_name_0 = "unknow errorunknow errorunknow errorunknow errorunknow errorunknow errorunknow errorunknow errorunknow errorunknow errorunknow errorunknow error"
	_errcode_name_1 = "unknow error"
	_errcode_name_2 = "unknow error"
)

var (
	_errcode_index_0 = [...]uint8{0, 12, 24, 36, 48, 60, 72, 84, 96, 108, 120, 132, 144}
)

func (i errcode) Desc() string {
	switch {
	case i <= 11:
		return _errcode_name_0[_errcode_index_0[i]:_errcode_index_0[i+1]]
	case i == 1000:
		return _errcode_name_1
	case i == 1002:
		return _errcode_name_2
	default:
		return "errcode(" + strconv.FormatInt(int64(i), 10) + ")"
	}
}

func (i errcode) Code() uint32 {
	return uint32(i)
}

func (i errcode) With(err error) error {
	return &Error{i, err}
}

func (i errcode) Wrap(err error, message string) error {
	return &Error{i, errors.Wrap(err, message)}
}

func (i errcode) Wrapf(err error, format string, args ...any) error {
	return &Error{i, errors.Wrapf(err, format, args...)}
}

func (i errcode) WithMessage(message string) error {
	return &Error{i, errors.New(message)}
}

func (i errcode) WithMessagef(format string, args ...any) error {
	return &Error{i, errors.Errorf(format, args...)}
}

type Error struct {
	ec    errcode
	cause error
}

func (e *Error) Error() string {
	if e.cause == nil || e.Code() == 0 {
		return "" // success
	}
	return fmt.Sprintf("code: %d, desc: %s, cause: %q", e.Code(), e.Desc(), e.cause)
}

func (e *Error) Code() uint32 {
	return e.ec.Code()
}

func (e *Error) Desc() string {
	return e.ec.Desc()
}

func (e *Error) Cause() error {
	return errors.Cause(e.cause)
}

// Unwrap provides compatibility for Go 1.13 error chains.
func (e *Error) Unwrap() error { return e.cause }

func (e *Error) Format(s fmt.State, verb rune) {
	switch verb {
	case 'v':
		if s.Flag('+') {
			fmt.Fprintf(s, "%+v\ncode: %d, desc: %s", e.Cause(), e.Code(), e.Desc())
			return
		}
		fallthrough
	case 's', 'q':
		io.WriteString(s, e.Error())
	}
}
