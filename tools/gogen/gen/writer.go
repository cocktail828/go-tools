package gen

import (
	"bytes"
	"fmt"
	"go/format"
	"go/parser"
	"go/printer"
	"go/token"
	"os"
	"path/filepath"

	"github.com/cocktail828/go-tools/tools/gogen/ver"
)

func formatGoCode(input string) (string, error) {
	formatted, err := format.Source([]byte(input))
	if err == nil {
		return string(formatted), nil
	}

	fset := token.NewFileSet()

	file, err := parser.ParseFile(fset, "", input, parser.ParseComments)
	if err != nil {
		return "", fmt.Errorf("parser source code fail: %w", err)
	}

	var buf bytes.Buffer
	printerConfig := &printer.Config{
		Mode:     printer.UseSpaces | printer.TabIndent,
		Tabwidth: 4,
	}

	if err = printerConfig.Fprint(&buf, fset, file); err != nil {
		return "", fmt.Errorf("format source code fail: %w", err)
	}

	return buf.String(), nil
}

type Writer interface {
	Write(root string) error
}

type File struct {
	PlainTxt bool // 是否是纯文本
	SubDir   string
	Name     string
	Payload  string
}

func (f File) Write(root string) error {
	if f.SubDir != "" {
		os.MkdirAll(filepath.Join(root, f.SubDir), 0755)
	}

	content, err := formatGoCode(f.Payload)
	if err != nil {
		content = f.Payload
	}

	if !f.PlainTxt {
		content = fmt.Sprintf("// Code generated by \"cocktail828.gogen\" %q\n%s", ver.Version, content)
	} else {
		content = fmt.Sprintf("# Code generated by \"cocktail828.gogen\" %q\n%s", ver.Version, content)
	}
	return os.WriteFile(filepath.Join(root, f.SubDir, f.Name), []byte(content), 0644)
}

type MultiFile []File

func (mf MultiFile) Write(root string) error {
	for _, f := range mf {
		if err := f.Write(root); err != nil {
			return err
		}
	}

	return nil
}
