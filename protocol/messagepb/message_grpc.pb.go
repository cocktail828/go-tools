// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: message.proto

package messagepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Versatile_Upload_FullMethodName = "/rpc.Versatile/Upload"
	Versatile_Search_FullMethodName = "/rpc.Versatile/Search"
	Versatile_Query_FullMethodName  = "/rpc.Versatile/Query"
	Versatile_Update_FullMethodName = "/rpc.Versatile/Update"
	Versatile_Delete_FullMethodName = "/rpc.Versatile/Delete"
	Versatile_Any_FullMethodName    = "/rpc.Versatile/Any"
)

// VersatileClient is the client API for Versatile service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VersatileClient interface {
	Upload(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Search(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Query(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Update(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Delete(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Any(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type versatileClient struct {
	cc grpc.ClientConnInterface
}

func NewVersatileClient(cc grpc.ClientConnInterface) VersatileClient {
	return &versatileClient{cc}
}

func (c *versatileClient) Upload(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Versatile_Upload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versatileClient) Search(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Versatile_Search_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versatileClient) Query(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Versatile_Query_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versatileClient) Update(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Versatile_Update_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versatileClient) Delete(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Versatile_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *versatileClient) Any(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Versatile_Any_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VersatileServer is the server API for Versatile service.
// All implementations must embed UnimplementedVersatileServer
// for forward compatibility.
type VersatileServer interface {
	Upload(context.Context, *Request) (*Response, error)
	Search(context.Context, *Request) (*Response, error)
	Query(context.Context, *Request) (*Response, error)
	Update(context.Context, *Request) (*Response, error)
	Delete(context.Context, *Request) (*Response, error)
	Any(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedVersatileServer()
}

// UnimplementedVersatileServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVersatileServer struct{}

func (UnimplementedVersatileServer) Upload(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedVersatileServer) Search(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedVersatileServer) Query(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedVersatileServer) Update(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedVersatileServer) Delete(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedVersatileServer) Any(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Any not implemented")
}
func (UnimplementedVersatileServer) mustEmbedUnimplementedVersatileServer() {}
func (UnimplementedVersatileServer) testEmbeddedByValue()                   {}

// UnsafeVersatileServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VersatileServer will
// result in compilation errors.
type UnsafeVersatileServer interface {
	mustEmbedUnimplementedVersatileServer()
}

func RegisterVersatileServer(s grpc.ServiceRegistrar, srv VersatileServer) {
	// If the following call pancis, it indicates UnimplementedVersatileServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Versatile_ServiceDesc, srv)
}

func _Versatile_Upload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersatileServer).Upload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Versatile_Upload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersatileServer).Upload(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Versatile_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersatileServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Versatile_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersatileServer).Search(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Versatile_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersatileServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Versatile_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersatileServer).Query(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Versatile_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersatileServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Versatile_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersatileServer).Update(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Versatile_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersatileServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Versatile_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersatileServer).Delete(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Versatile_Any_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VersatileServer).Any(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Versatile_Any_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VersatileServer).Any(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Versatile_ServiceDesc is the grpc.ServiceDesc for Versatile service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Versatile_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.Versatile",
	HandlerType: (*VersatileServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upload",
			Handler:    _Versatile_Upload_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Versatile_Search_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _Versatile_Query_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Versatile_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Versatile_Delete_Handler,
		},
		{
			MethodName: "Any",
			Handler:    _Versatile_Any_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "message.proto",
}
